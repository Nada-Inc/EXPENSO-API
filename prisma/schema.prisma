// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// User Modal
model User {
  id               String            @id @default(uuid()) @db.Char(36)
  userName         String
  password         String
  email            String            @unique
  phoneNumber      String
  currency         String
  country          String
  subscriptionType String
  lastLogin        DateTime?
  status           Boolean           @default(true)

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  fixedIncome      FixedIncome[]
  variableIncome   VariableIncome[]
  fixedExpense     FixedExpense[]
  summary          Summary[]
  variableExpense  VariableExpense[]

  @@index([email])
}

// Income Models

model FixedIncome {
  id              String            @id @default(uuid()) @db.Char(36)
  incomeName      String
  userId          String // This references the User model's id
  user            User              @relation(fields: [userId], references: [id])
  amount          Decimal
  creditDate      Int               @default(1)

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  fixedIncomeData FixedIncomeData[]

  @@index([userId])
}

model FixedIncomeData {
  id          String   @id @default(uuid()) @db.Char(36)
  fixIncomeId String
  fixedIncomeItem FixedIncome @relation(fields: [fixIncomeId], references: [id])
  amount      Float

  createdDate DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([fixIncomeId])
}

model VariableIncome {
  id                 String               @id @default(uuid()) @db.Char(36)
  incomeame          String
  amount             Float
  userId             String // This references the User model's id
  user               User                 @relation(fields: [userId], references: [id])

  createdDate        DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  variableIncomeData VariableIncomeData[]

  @@index([userId])
}

model VariableIncomeData {
  id               String         @id @default(uuid()) @db.Char(36)
  variableIncomeId String
  variableIncome   VariableIncome @relation(fields: [variableIncomeId], references: [id])
  amount           Float

  createdDate DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([variableIncomeId])
}

// Expense Modals

model FixedExpense {
  id               String             @id @default(uuid()) @db.Char(36)
  expenseName      String
  amount           Decimal
  debitDate        DateTime
  userId           String
  user             User               @relation(fields: [userId], references: [id])

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  fixedExpenseData FixedExpenseData[]

  @@index([userId])
}

model FixedExpenseData {
  id             String       @id @default(uuid()) @db.Char(36)
  amount         Decimal
  fixedExpenseId String
  fixedExpense   FixedExpense @relation(fields: [fixedExpenseId], references: [id])

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([fixedExpenseId])
}

model VariableExpense {
  id                String   @id @default(uuid()) @db.Char(36)
  variableExpenseId String
  expenseName       String
  amount            Float
  userId            String
  user              User     @relation(fields: [userId], references: [id])

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
}

// Summary
model Summary {
  id              String   @id @default(uuid()) @db.Char(36)
  fixExpenseTotal Float
  varExpenseTotal Float
  fixIncomeTotal  Float
  varIncomeTotal  Float
  userId          String
  user            User     @relation(fields: [userId], references: [id])

  updatedAt       DateTime @updatedAt
  createdAt       DateTime @default(now())

  @@index([userId])
}

model TestTable {
  id   Int    @id @default(autoincrement())
  name String
  age  Int?
}